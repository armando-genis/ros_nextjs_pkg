"use client"
import { useEffect, useRef } from 'react';
import * as THREE from 'three';
import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';
const ROSLIB = require('roslib');

function CarVisualization() {
    const mountRef = useRef(null);

    useEffect(() => {
        const scene = new THREE.Scene();
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        mountRef.current.appendChild(renderer.domElement);

        const width = mountRef.current.clientWidth;
        const height = mountRef.current.clientHeight;

        const camera = new THREE.PerspectiveCamera(90, width / height, 0.1, 1000);
        camera.position.z = -10;
        camera.position.y = Math.tan((45 * Math.PI) / 180) * Math.abs(camera.position.z);
        camera.lookAt(0, 0, 0);
        renderer.setSize(width, height);

        // Add the AxesHelper
        const axesHelper = new THREE.AxesHelper(1);
        axesHelper.position.set(-2, 0.2, -3.5);
        scene.add(axesHelper);

        // Add the directional light
        const directionalLight = new THREE.DirectionalLight(0xffffff, 9);
        directionalLight.position.set(0, 5, 0);
        scene.add(directionalLight);

        const cubeGeometry = new THREE.BoxGeometry(-7, 1, 1);
        const cubeMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
        const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
        cube.position.set(-10, 0.2, -3.5);
        scene.add(cube);

        const gridHelper = new THREE.GridHelper(10, 10);
        scene.add(gridHelper);

        const objLoader = new OBJLoader();
        objLoader.load('/models/Car_Base_FR_Layout_Sups_low_poly.objFB285956-E578-486A-830C-770E083C1090.obj', (object) => {
            object.scale.set(1, 1, 0.8);
            object.position.set(0, 0, -2);
            scene.add(object);
        });

        const pointsGeometry = new THREE.BufferGeometry();
        const pointsMaterial = new THREE.PointsMaterial({ color: 0x00ff00, size: 1 });
        const points = new THREE.Points(pointsGeometry, pointsMaterial);
        scene.add(points);

        const ros = new ROSLIB.Ros({
            url: 'ws://localhost:9090'
        });

        const listener = new ROSLIB.Topic({
            ros: ros,
            name: '/points_raw',
            messageType: 'sensor_msgs/PointCloud2'
        });

        listener.subscribe((message) => {
            // Convert PointCloud2 to a Three.js geometry
            const float32Array = new Float32Array(message.data.buffer);

            // Assuming x, y, z are the first three fields in PointCloud2
            const vertices = [];
            for (let i = 0; i < float32Array.length; i += message.point_step / 4) {
                vertices.push(float32Array[i], float32Array[i + 1], float32Array[i + 2]);
            }

            pointsGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
        });

        const animate = () => {
            requestAnimationFrame(animate);
            renderer.render(scene, camera);
        };

        const handleResize = () => {
            const width = mountRef.current.clientWidth;
            const height = mountRef.current.clientHeight;
            renderer.setSize(width, height);
            camera.aspect = width / height;
            camera.updateProjectionMatrix();
        };

        window.addEventListener('resize', handleResize);
        animate();

        return () => {
            listener.unsubscribe();
            window.removeEventListener('resize', handleResize);
            renderer.dispose();
        };
    }, []);

    return <div ref={mountRef} style={{ width: '100%', height: '100%' }} />;
}

export default CarVisualization;


    function base64ToArrayBuffer(base64) {
        const binaryString = window.atob(base64);
        const len = binaryString.length;
        const bytes = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
            bytes[i] = binaryString.charCodeAt(i);
        }
        return bytes.buffer;
    }
