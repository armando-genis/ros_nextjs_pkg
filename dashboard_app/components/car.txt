"use client"
import { useEffect, useRef } from 'react';
import * as THREE from 'three';
import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';
const ROSLIB = require('roslib');

function CarVisualization() {
    const mountRef = useRef(null);

    useEffect(() => {
        const scene = new THREE.Scene();
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        mountRef.current.appendChild(renderer.domElement);

        const width = mountRef.current.clientWidth;
        const height = mountRef.current.clientHeight;

        const camera = new THREE.PerspectiveCamera(90, width / height, 0.1, 1000);
        camera.position.z = -10;
        camera.position.y = Math.tan((45 * Math.PI) / 180) * Math.abs(camera.position.z);
        camera.lookAt(0, 0, 0);
        renderer.setSize(width, height);

        // Add the AxesHelper
        const axesHelper = new THREE.AxesHelper(1);
        axesHelper.position.set(-2, 0.2, -3.5);
        scene.add(axesHelper);

        // Add the directional light
        const directionalLight = new THREE.DirectionalLight(0xffffff, 5);
        directionalLight.position.set(0, 5, 0);
        scene.add(directionalLight);

        // Add the ambient light
        const gridHelper = new THREE.GridHelper(10, 10);
        scene.add(gridHelper);

        const objLoader = new OBJLoader();
        objLoader.load('/models/Car_Base_FR_Layout_Sups_low_poly.objFB285956-E578-486A-830C-770E083C1090.obj', (object) => {
            object.scale.set(1, 1, 0.8);
            object.position.set(0, 0, -2);
            scene.add(object);
        });

        // Create a geometry to hold all the points
        const pointGeometry = new THREE.BufferGeometry();
        const pointMaterial = new THREE.PointsMaterial({ color: 0xffffff, size: 0.05 });
        const pointCloud = new THREE.Points(pointGeometry, pointMaterial);
        scene.add(pointCloud);


        const ros = new ROSLIB.Ros({
            url: 'ws://localhost:9090'
        });

        const listener = new ROSLIB.Topic({
            ros: ros,
            name: '/points_raw',
            messageType: 'sensor_msgs/PointCloud2'
        });

        listener.subscribe((message) => {
            let base64String = message.data;
            let rawBytes = Uint8Array.from(atob(base64String), c => c.charCodeAt(0));

            // Step 2: Deserialize the Byte Array
            let points = [];
            let point_step = message.point_step;
            let fields = message.fields;

            for (let i = 0; i < rawBytes.length; i += point_step) {
                let point = {};
                fields.forEach(field => {
                    let offset = field.offset;
                    // Assuming datatype 7, which represents FLOAT32, we extract 4 bytes
                    let bytesForField = rawBytes.slice(i + offset, i + offset + 4);
                    let value = new Float32Array(bytesForField.buffer)[0];
                    point[field.name] = value;
                });
                points.push(point);
            }

            // Convert the points to format suitable for Three.js BufferGeometry
            const vertices = new Float32Array(points.length * 3);
            const maxDistance = 10; // This is your threshold distance, adjust as needed
            const origin = new THREE.Vector3(0, 0, 0); // Assuming you're measuring distance from the origin
            let count = 0; // Keep track of how many points we've added
            for (let i = 0; i < points.length; i++) {
                if (isNaN(points[i].x) || isNaN(points[i].y) || isNaN(points[i].z)) {
                    // console.error("NaN detected in point data", points[i]);
                    continue; // Skip this point
                }
                let pointVec = new THREE.Vector3(points[i].x, points[i].y, points[i].z);
                let distance = pointVec.distanceTo(origin);
                if (distance <= maxDistance) {
                    vertices[i * 3] = points[i].x;
                    vertices[i * 3 + 1] = points[i].z;
                    vertices[i * 3 + 2] = points[i].y;
                    count++;
                }
            }

            const filteredVertices = vertices.slice(0, count * 10);
            pointCloud.rotation.y = Math.PI / 2;

            pointGeometry.setAttribute('position', new THREE.BufferAttribute(filteredVertices, 3));

            pointGeometry.computeBoundingSphere(); // This is important for correctly rendering the point cloud


            // Now 'points' has the deserialized point cloud data
            console.log(vertices); // This will log the deserialized points
        });


        const animate = () => {
            requestAnimationFrame(animate);
            renderer.render(scene, camera);
        };

        const handleResize = () => {
            const width = mountRef.current.clientWidth;
            const height = mountRef.current.clientHeight;
            renderer.setSize(width, height);
            camera.aspect = width / height;
            camera.updateProjectionMatrix();
        };

        window.addEventListener('resize', handleResize);
        animate();

        return () => {
            listener.unsubscribe();
            window.removeEventListener('resize', handleResize);
            renderer.dispose();
        };
    }, []);

    return <div ref={mountRef} style={{ width: '100%', height: '100%' }} />;
}

export default CarVisualization;



        // const ros = new ROSLIB.Ros({
        //     url: 'ws://localhost:9090'
        // });

        // const listener = new ROSLIB.Topic({
        //     ros: ros,
        //     name: '/points_raw',
        //     messageType: 'sensor_msgs/PointCloud2'
        // });

        // listener.subscribe((message) => {
        //     processMessage(message);
        // });

        // if (pointCloudData && pointCloudData.data) {
        //     processMessage(pointCloudData);
        //     console.log(pointCloudData);
        // }